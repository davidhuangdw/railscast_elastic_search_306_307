        # facet
          scope :search_text, ->(query)do
            if query.present?
              result = search(
                query:{
                  query_string:{
                    query:query
                  }
                },
                facets:{
                  authors:{terms:{field:'author_id'}}
                }
              )
            end
          end

        # index associations
        def as_indexed_json(options={})
          self.as_json(
            include: { categories: { only: :title},
                       authors:    { methods: [:full_name], only: [:full_name] },
                       comments:   { only: :text }
                     })
        end
        def author_name; author.name end
        def as_indexed_json(options={})
          as_json(methods: [:author_name])
        end

        # search
        Article.search 'foo'                    # search by string
        response = Article.search \             # search by hash arguments
             query: {
               match: {
                 title: 'foo'
               }
             },
             highlight: {
               fields: {
                 title: {}
               }
             }
        Article.search '{"query" : { "match_all" : {} }}'       # by JSON string

        # more dsl query
          result = search(
            query:{
              query_string:{
                  query:query
              }
            }
          )
          result = search(
            query:{
              query_string:{
                  query:query
                  fuzziness: 2,
                  default_operator: "AND",
                  fields:['content', 'author_name']
              }
            }
          )


        # query string
        'fictional OR character'
        'fictional AND character'
        'fictional NOT character'

        # index config
        class Article
          settings index: { number_of_shards: 1 } do
            mappings dynamic: 'false' do
              indexes :title, analyzer: 'english', index_options: 'offsets'
            end
          end

          # or
          mapping do
            indexes :id, type: 'integer'
            indexes :author_id, type: 'integer'
            indexes :author_name
            indexes :name, boost: 10       # rank score weight
            indexes :content, analyzer:'snowball'
            indexes :published_at, type: 'date'
            indexes :comments_count, type: 'integer'
          end
        end

        # example
        class Article
          include Elastic...
          scope :search_text, ->(query){ search(query).records if query }
        end
        # articles_controller.rb
        def index
          @articles = Article.includes(:author).search_text(params[:search]).page(params[:page]).per(2)
        end

        # search method
        response = Article.search 'fox dogs'
        response.results.total
        response.results.first._score           # for rank
        response.results.first._source.title    # for data
        response.records.class                  # => ActiveRecord::Relation::ActiveRecord_Relation_Article
        response.page(2).records
        @articles = Article.search(params[:q]).page(params[:page]).records

        # models/article.rb
        class Article
          include Elasticsearch::Model
          include Elasticsearch::Model::Callbacks
        end
        Article.import

        # config
        Elasticsearch::Model.client = Elasticsearch::Client.new log: true, host:'api.example.org'

        gem 'elasticsearch-model'
        gem 'elasticsearch-rails'

        # install & start elastic_search server
        brew install elasticsearch
        elasticsearch

